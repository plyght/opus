# Library Management System - Environment Configuration
# This file contains all environment variables required for the application
# Copy this file to .env and configure the values for your environment

# Database Configuration
# PostgreSQL connection string format: postgresql://[user[:password]@][netloc][:port][/dbname]
# Local development with default PostgreSQL setup
DATABASE_URL="postgresql://postgres:password@localhost:5432/library_db"

# Docker Compose configuration (use when running with docker-compose up)
# DATABASE_URL="postgresql://postgres:password@postgres:5432/library_db"

# Production configuration example
# DATABASE_URL="postgresql://username:secure_password@your-db-host:5432/library_db?sslmode=require"

# Email Service Configuration (Resend)
# API key required for sending overdue notifications and welcome emails
# Obtain your API key from: https://resend.com/api-keys
RESEND_API_KEY="re_YourActualResendAPIKey_Here"

# Email sender configuration (optional)
RESEND_FROM_EMAIL="Library System <noreply@yourdomain.com>"
RESEND_FROM_NAME="Library Management System"

# Authentication Configuration (Better Auth)
# Generate a secure random string (32+ characters recommended)
# Use: openssl rand -base64 32
BETTER_AUTH_SECRET="your-super-secure-32-character-secret-key-here-change-this"

# Base URL for your application (used for OAuth redirects)
# Development environment
BETTER_AUTH_URL="http://localhost:3000"
# Production example
# BETTER_AUTH_URL="https://yourdomain.com"

# Session configuration
BETTER_AUTH_SESSION_EXPIRES_IN="7d"
BETTER_AUTH_JWT_EXPIRES_IN="1h"

# OAuth Provider Configuration

# GitHub OAuth
# Obtain credentials from: https://github.com/settings/applications/new
# Set Authorization callback URL to: http://localhost:3000/api/auth/callback/github
GITHUB_CLIENT_ID="your_github_oauth_app_client_id"
GITHUB_CLIENT_SECRET="your_github_oauth_app_client_secret"

# Google OAuth
# Obtain credentials from: https://console.developers.google.com/credentials
# Set Authorized redirect URI to: http://localhost:3000/api/auth/callback/google
GOOGLE_CLIENT_ID="your-google-oauth-client-id.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET="your-google-oauth-client-secret"

# Application Configuration
NODE_ENV="development"
PORT=3000
API_PORT=8080
CORS_ORIGIN="http://localhost:3000"

# Library Business Logic Configuration
DEFAULT_LOAN_PERIOD_DAYS=14
MAX_RENEWALS=2
DEFAULT_MAX_CHECKOUTS=5
OVERDUE_REMINDER_DAYS=1

# Security and Performance Configuration
RATE_LIMIT_RPM=100
MAX_UPLOAD_SIZE_MB=10
JWT_SECRET="another-secure-secret-for-jwt-tokens-change-this"

# External Services (Optional)
OPEN_LIBRARY_API_URL="https://openlibrary.org/api"
# REDIS_URL="redis://localhost:6379"
# SENTRY_DSN="https://your-sentry-dsn@sentry.io/project-id"

# Docker Compose Overrides
# Uncomment when using Docker Compose
# DATABASE_URL="postgresql://postgres:password@postgres:5432/library_db"
# BETTER_AUTH_URL="http://localhost:3000"
# CORS_ORIGIN="http://localhost:3000"

# Production Deployment Checklist
# 1. Use strong, unique secrets for all authentication variables
# 2. Configure SSL/TLS for DATABASE_URL (sslmode=require)
# 3. Set NODE_ENV=production
# 4. Configure proper CORS_ORIGIN for your domain
# 5. Set up proper DNS and SSL certificates
# 6. Use environment-specific OAuth redirect URLs